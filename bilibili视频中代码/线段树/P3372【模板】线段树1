#include <iostream>
#include <cstdio>


using namespace std ;

const int N = 1e5+5 ;
struct Node {
  int l , r ;
  long long sum , lazy ;
}xds[N<<2] ;
int a[N] , root ;

int len(int x) {return xds[x].r-xds[x].l+1;}
int ls(int x){return x<<1;} 
int rs(int x){return x<<1|1;}
void update(int x) {
  xds[x].sum = xds[ls(x)].sum + xds[rs(x)].sum ;
}
void brush(int x,long long k) { 
  xds[x].lazy += k ;
  xds[x].sum += len(x)*k;
}
void push_down(int x) {
  brush(ls(x),xds[x].lazy) ;
  brush(rs(x),xds[x].lazy) ;
  xds[x].lazy = 0 ;
}

void build(int now,int l,int r) {
  xds[now].l = l ;
  xds[now].r = r ;
  if(l==r) {
    xds[now].sum = a[l] ;
    return ;
  }
  int mid = l + r >> 1 ;
  build(ls(now),l,mid) ;
  build(rs(now),mid+1,r) ;
  update(now) ;
}

void add ( int now , int l , int r , long long k ) {
  if(l<=xds[now].l&&xds[now].r<=r) {
    brush(now,k) ;
    return ;
  }
  push_down(now) ;//不加的话update把这个点原来的标记的作用抹掉了
  int mid = xds[now].l + xds[now].r >> 1 ;
  if(l<=mid) add(ls(now),l,r,k) ;
  if(r>mid) add(rs(now),l,r,k) ;
  update(now) ;
}

long long query ( int now , int l , int r ) {
  if(l<=xds[now].l&&xds[now].r<=r) {
    return xds[now].sum ;
  }
  push_down(now) ;//不加的话update把这个点原来的标记的作用抹掉了
  int mid = xds[now].l + xds[now].r >> 1 ;
  long long res = 0 ;
  if(l<=mid)
    res += query(ls(now),l,r) ;
  if(r>mid)
    res += query(rs(now),l,r) ;
  return res;
}
  
int main ( ) {

  int n , m ;
  cin >> n >> m ;
  for ( int i = 1 ; i <= n ; i ++ ) {
    cin >> a[i] ;
  }
  build(1,1,n) ;
  
  while(m--) {
    int opt , x , y , k ;
    cin >> opt ;
    if(opt==1) {
      cin >> x >> y >> k ;
      add(1,x,y,k) ;
    }
    else {
      cin >> x >> y ;
      cout << query(1,x,y) << endl ;
    }
  }
  
    return 0 ;
}
