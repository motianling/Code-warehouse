#include <iostream>
#include <cstdio>

using namespace std ;

typedef long long ll ;

const int N = 1000005 ;
struct node {
  int l , r ; 
  ll sum , lazy ;//左端点、右端点、区间和、懒标记
}tree[N<<2] ;
int n , m , a[N] ;

void update (int root) {
  tree[root].sum = tree[root<<1].sum + tree[root<<1|1].sum ;
}

void build (int root,int l,int r) {
  tree[root].l = l ;
  tree[root].r = r ;
  if(l==r) {
    tree[root].sum = a[l] ;
    return ;
  }
  int mid = l + r >> 1 ;
  build(root<<1,l,mid) ;
  build(root<<1|1,mid+1,r) ;
  update(root) ;
}

void add (int root , int id , int k ) {
  if(tree[root].l == tree[root].r) {
    tree[root].sum += k ;
    return ;
  }
  int mid = tree[root].l + tree[root].r >> 1 ;
  if(id<=mid) add ( root<<1 , id , k );
  else add ( root<<1|1 , id , k ) ;
  update(root) ;
}

ll query ( int root , int l , int r ) {
  ll res = 0 ;
  if(l<=tree[root].l && r >= tree[root].r ) {
    return tree[root].sum ;
  }
  int mid = tree[root].l + tree[root].r >> 1 ;
  if(l<=mid) res += query(root<<1,l,r) ;
  if(r>=mid+1) res += query(root<<1|1,l,r) ;
  return res ;
}

int main ( ) {
  ios::sync_with_stdio(false) ;
  cin >> n >> m ;
  for ( int i = 1 ; i <= n ; i ++ ) {
    cin >> a[i] ;
  }
  build(1,1,n) ;
  while(m--) {
    int o , x , y , k ;
    cin >> o ;
    if(o==1) {
      cin >> x >> k ;
      add ( 1 , x , k ) ;
    }
    else {
      cin >> x >> y ;
      cout << query(1,x,y) << endl ;
    }
  }
}
